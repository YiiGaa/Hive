#ifndef   _ERRORCODE_HPP_
#define   _ERRORCODE_HPP_

#include <map>
#include <vector>
#include <iostream>
#include "kernel/common/tools/tools.hpp"

enum ERROR_CODE{
    ERR_OK = 0,
    ERR_Start = -2147483646,

        //executeorder
        ERR_THINK_EXCUTEORDER_BLOCK,
        ERR_THINK_EXCUTEORDER_EXCEPTION,
        //httppost
        ERR_THINK_HTTPPOST_INIT_EXCEPTION,
        ERR_THINK_HTTPPOST_CleanUp_EXCEPTION,
        ERR_THINK_HTTPPOST_POST_EXCEPTION,
        ERR_THINK_HTTPPOST_GET_EXCEPTION,
        //rabbitmq
        ERR_THINK_RABBITMQ_BLOCK,
        ERR_THINK_RABBITMQ_CREATECONNECT_BLOCK,
        ERR_THINK_RABBITMQ_OPENCONNECT_BLOCK,
        ERR_THINK_RABBITMQ_LOGGIN_BLOCK,
        ERR_THINK_RABBITMQ_CHANNELOPEN_BLOCK,
        ERR_THINK_RABBITMQ_CONNECT_EXCEPTION,
        ERR_THINK_RABBITMQ_CHANNELCLOSE_BLOCK,
        ERR_THINK_RABBITMQ_CONNECTCLOSE_BLOCK,
        ERR_THINK_RABBITMQ_CONNECTDESTROY_BLOCK,
        ERR_THINK_RABBITMQ_CONNECTCLOSE_EXCEPTION,
        ERR_THINK_RABBITMQ_EXCHANGEDECLARE_BLOCK,
        ERR_THINK_RABBITMQ_EXCHANGEDECLARE_EXCEPTION,
        ERR_THINK_RABBITMQ_QUEUEDECLARE_BLOCK,
        ERR_THINK_RABBITMQ_QUEUEDECLARENAME_BLOCK,
        ERR_THINK_RABBITMQ_QUEUEBLIND_BLOCK,
        ERR_THINK_RABBITMQ_QUEUEDECLARE_EXCEPTION,
        ERR_THINK_RABBITMQ_UNBINDQUEUE_BLOCK,
        ERR_THINK_RABBITMQ_UNBINDQUEUE_EXCEPTION,
        ERR_THINK_RABBITMQ_QOSPREFETCH_BLOCK,
        ERR_THINK_RABBITMQ_QOSPREFETCH_EXCEPTION,
        ERR_THINK_RABBITMQ_CONSUME_BLOCK,
        ERR_THINK_RABBITMQ_GETMESSAGE_BLOCK,
        ERR_THINK_RABBITMQ_GETMESSAGE_EXCEPTION,
        ERR_THINK_RABBITMQ_MESSAGEACK_BLOCK,
        ERR_THINK_RABBITMQ_MESSAGEACK_EXCEPTION,
        ERR_THINK_RABBITMQ_SENDMESSAGE_BLOCK,
        ERR_THINK_RABBITMQ_SENDMESSAGE_EXCEPTION,
        ERR_THINK_RABBITMQ_SENDMESSAGEEMPTY_BLOCK,
        ERR_THINK_RABBITMQ_HEARTBEAT_BLOCK,
        ERR_THINK_RABBITMQ_HEARTBEAT_EXCEPTION,
        //redis
        ERR_THINK_REDIS_Connect_BLOCK,
        ERR_THINK_REDIS_Connect_PWD_BLOCK,
        ERR_THINK_REDIS_Connect_EXCEPTION,
        ERR_THINK_REDIS_Excute_EXCEPTION,
        ERR_THINK_REDIS_Delete_EXCEPTION,
        ERR_THINK_REDIS_Expire_EXCEPTION,
        ERR_THINK_REDIS_DisConnect_EXCEPTION,  
        //missionget
        ERR_MOVE_MISSIONGET_Init_EXCEPTION,
        ERR_MOVE_MISSIONGET_ConnectPool_EXCEPTION,
        ERR_MOVE_MISSIONGET_DisConnectPool_EXCEPTION,
        ERR_MOVE_MISSIONGET_ListenMission_EXCEPTION,
        ERR_MOVE_MISSIONGET_AckMission_EXCEPTION,
        ERR_MOVE_MISSIONGET_ReportingMission_EXCEPTION,
        //missionprogress
        ERR_MOVE_MISSIONPROGRESS_Init_EXCEPTION,
        ERR_MOVE_MISSIONPROGRESS_ConnectPool_EXCEPTION,
        ERR_MOVE_MISSIONPROGRESS_DisConnectPool_EXCEPTION,
        ERR_MOVE_MISSIONPROGRESS_GetingProgress_EXCEPTION,
        ERR_MOVE_MISSIONPROGRESS_ReportingProgress_EXCEPTION,
        ERR_MOVE_MISSIONPROGRESS_ReportingWatchDog_EXCEPTION,
        //missionstate
        ERR_MOVE_MISSIONSTATE_Init_EXCEPTION,
        ERR_MOVE_MISSIONSTATE_ConnectPool_EXCEPTION,
        ERR_MOVE_MISSIONSTATE_DisConnectPool_EXCEPTION,
        ERR_MOVE_MISSIONSTATE_ListenState_EXCEPTION,
        ERR_MOVE_MISSIONSTATE_AckState_EXCEPTION,
        //taskcenter
        ERR_MOVE_TASKCENTER_Init_EXCEPTION,
        ERR_MOVE_TASKCENTER_ListenMission_EXCEPTION,
        ERR_MOVE_TASKCENTER_FinishMission_EXCEPTION,
        ERR_MOVE_TASKCENTER_StartMission_EXCEPTION,
};


class CErrorCode {
    public:
        static int isErrorHappened(ERROR_CODE param);
        static std::string getErrorCode(ERROR_CODE param);
        static std::string getErrorMessage(ERROR_CODE param);
        static std::map<ERROR_CODE, std::string> errorMap;
};




#endif
